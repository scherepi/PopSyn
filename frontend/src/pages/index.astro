---
import "../styles/global.css";
---
<div id="topbar" class="flex flex-wrap items-baseline gap-x-2 gap-y-2 mt-4 ml-8">
	<span class="brand tracking-[0.45em] uppercase text-black">p o p s y n</span>
	<span class="text-black">|</span>
	<span class="bg-yellow-200 px-1 text-black">see how it sounds</span>
	<span class="text-black">|</span>
	<a href="https://github.com/scherepi/PopSyn" class="terminal-link">github</a>
	<span class="text-black">|</span>
  </div>

<div class="px-4 sm:px-8 md:px-8">
  <div class="md:grid md:grid-cols-3 md:gap-6">
    <section class="intro-terminal px-4 py-6 sm:px-8 sm:py-10 md:px-0 md:col-span-1">
     
      <p class="terminal-red mt-3">
        popsyn helps you see, feel and be sound. made by a bunch of teens who care about music, how it makes us feel, and what else we can connect that
      </p>
    </section>

    <div id="search-section" class="mt-6 px-2 font-syne-mono md:mt-0 md:px-0 md:col-span-2 md:col-start-2 ml-40 border-image-left ">
      <div class="flex items-center">
        <input id="song-query" type="text" placeholder="name your song" class="border border-black px-2 py-1 flex-1 ml-10" />
        <button id="search-btn" class="ml-2 px-6 py-1 border mx-42 border-black bg-black text-white">>>></button>
      </div>
      <div id="song-result" class="mt-4 w-full hidden">
          <div id="cover-ph" class="w-40 h-40 bg-gray-200 mr-3 flex-shrink-0"></div>
          <img id="cover" class="w-40 h-40 mr-3 hidden object-cover mt-10"/>

          <div class="flex-1">
            <div id="title" class="font-syne-semibold">—</div>
            <div id="artist" class="text-sm text-gray-600">—</div>
            <div id="color-display" class="w-20 h-20 mt-2 border border-black hidden"></div>
            <div id="why-display" class="mt-2 text-sm hidden"></div>
        </div>
        <div id="no-results" class="text-sm text-gray-600 mt-2 hidden">no results</div>
      </div>
      <div class="mt-4">
        <a id="add-link" href="/add" class="border border-black px-2 py-1 absolute bottom-30 right-70 ">add your own interpretation</a>

      </div>
    </div>
  </div>
</div>

<script>
  // @ts-nocheck
  const $ = (id) => document.getElementById(id);
  const topbar = $('topbar');
  const searchSection = $('search-section');
  const songResult = $('song-result');
  const input = $('song-query');
  const button = $('search-btn');
  const cover = $('cover');
  const coverPh = $('cover-ph');
  const title = $('title');
  const artist = $('artist');
  const noResults = $('no-results');
  const colorDisplay = $('color-display');
  const whyDisplay = $('why-display');
  const addLink = $('add-link');

  // Hardcoded demo songs to avoid any external APIs
  const DEMO_SONGS = [
    {
      artistName: 'Rick Astley',
      trackName: 'Never Gonna Give You Up',
      artworkUrl: 'https://is1-ssl.mzstatic.com/image/thumb/Music125/v4/0a/4e/59/0a4e59e0-b9f7-7a7f-3c6b-3c38f8928e61/source/200x200bb.jpg'
    },
    { artistName: 'Billie Eilish', trackName: 'bad guy', artworkUrl: 'https://is1-ssl.mzstatic.com/image/thumb/Music123/v4/1f/2e/9d/1f2e9d9e-2a1a-2b3a-7d1a-6a44f2a2e7d7/source/200x200bb.jpg' },
    { artistName: 'Daft Punk', trackName: 'Harder, Better, Faster, Stronger', artworkUrl: 'https://is1-ssl.mzstatic.com/image/thumb/Music114/v4/6e/19/6a/6e196a4b-6f6a-bfdd-5e04-3d0a2c6a9e9f/source/200x200bb.jpg' },
    { artistName: 'Adele', trackName: 'Hello', artworkUrl: 'https://is3-ssl.mzstatic.com/image/thumb/Music71/v4/44/24/7e/44247e2d-2e86-8b49-5fe6-7a3f63c2a3d5/source/200x200bb.jpg' },
    { artistName: 'Kendrick Lamar', trackName: 'HUMBLE.', artworkUrl: 'https://is1-ssl.mzstatic.com/image/thumb/Music127/v4/25/78/ce/2578ce3a-8e0d-b57a-3e6a-1e8a58d4b9b1/source/200x200bb.jpg' },
    { artistName: 'Taylor Swift', trackName: 'Shake It Off', artworkUrl: 'https://is3-ssl.mzstatic.com/image/thumb/Music125/v4/6d/6a/50/6d6a50e9-3f66-2cb6-9af3-9a997ecfefa2/source/200x200bb.jpg' }
  ];

  function setSearchSectionHeight() {
    const vh = window.innerHeight || document.documentElement.clientHeight;
    const th = topbar ? topbar.getBoundingClientRect().height : 0;
    const h = Math.max(0, Math.floor((2 / 3) * (vh - th)));
    if (searchSection) searchSection.style.minHeight = h + 'px';
  }
  
  function pseudoColorFromString(str) {
    // Simple deterministic hash -> color
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = (hash * 31 + str.charCodeAt(i)) >>> 0;
    }
    const r = (hash & 0xFF);
    const g = (hash >> 8) & 0xFF;
    const b = (hash >> 16) & 0xFF;
    return `#${r.toString(16).padStart(2,'0')}${g.toString(16).padStart(2,'0')}${b.toString(16).padStart(2,'0')}`;
  }

  async function searchSong(q) {
    if (!q) return;
    songResult?.classList.remove('hidden');
    noResults.classList.add('hidden');
    title.textContent = '—';
    artist.textContent = '—';
    cover.src = '';
    cover.classList.add('hidden');
    coverPh.classList.remove('hidden');
    colorDisplay.classList.add('hidden');

    // Try iTunes API first for accurate cover art
    let item = null;
    try {
      const itunesUrl = `https://itunes.apple.com/search?term=${encodeURIComponent(q)}&entity=song&limit=1`;
      const res = await fetch(itunesUrl);
      const data = await res.json();
      const r = data?.results?.[0];
      if (r) {
        item = {
          artistName: r.artistName,
          trackName: r.trackName,
          artworkUrl: (r.artworkUrl100 || '').replace('100x100bb', '200x200bb')
        };
      }
    } catch {}

    // Fallback to local demo list if API fails/no match
    if (!item) {
      const query = q.toLowerCase();
      item = DEMO_SONGS.find(s => `${s.artistName} ${s.trackName}`.toLowerCase().includes(query)) || null;
    }

    if (!item) {
      title.textContent = '—';
      artist.textContent = '—';
      cover.src = '';
      cover.classList.add('hidden');
      coverPh.classList.remove('hidden');
      noResults.classList.remove('hidden');
      return;
    }

    title.textContent = item.trackName ?? '—';
    artist.textContent = item.artistName ?? '—';

    // Fake analysis: derive a consistent color from the artist+title
    const key = `${item.artistName}::${item.trackName}`;
    const userKey = `popsyn:user:${key}`;

    // Get user interpretation from localStorage if present
    let userData = null;
    try { userData = JSON.parse(localStorage.getItem(userKey) || 'null'); } catch {}

    const colorHex = userData?.hex || pseudoColorFromString(key);

    // Cover art: prefer remote art; keep placeholder if it fails
    const art = item.artworkUrl || '';
    const showCoverOk = () => {
      cover.classList.remove('hidden');
      coverPh.classList.add('hidden');
    };
    if (art) {
      cover.src = art;
      cover.onload = showCoverOk;
      cover.onerror = () => {
        cover.src = '';
        cover.classList.add('hidden');
        coverPh.classList.remove('hidden');
      };
    } else {
      cover.src = '';
      cover.classList.add('hidden');
      coverPh.classList.remove('hidden');
    }
    colorDisplay.style.backgroundColor = colorHex;
    colorDisplay.classList.remove('hidden');

    if (userData?.why) {
      whyDisplay.textContent = userData.why;
      whyDisplay.classList.remove('hidden');
    } else {
      whyDisplay.textContent = '';
      whyDisplay.classList.add('hidden');
    }

    // Link to add page with prefilled params
    if (addLink) {
      const params = new URLSearchParams({ artist: item.artistName, title: item.trackName }).toString();
      addLink.href = `/add?${params}`;
    }
  }

  // No color tile fallback: we stick with the placeholder when art isn't available

  button?.addEventListener('click', () => searchSong(input.value.trim()));
  input?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') searchSong(input.value.trim());
  });
  document.addEventListener('DOMContentLoaded', setSearchSectionHeight);
</script>